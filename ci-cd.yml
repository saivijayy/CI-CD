name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: |
          docker build -t my-web-app:latest .

      - name: Push Docker image
        run: |
          docker tag my-web-app:latest 975050341205.dkr.ecr.us-west-1.amazonaws.com/my-web-app:latest
          docker push 975050341205.dkr.ecr.us-west-1.amazonaws.com/my-web-app:latest

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to ECS
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
          TASK_DEFINITION: ${{ secrets.TASK_DEFINITION }}
        run: |
          aws ecs update-service --cluster $check --service $web-app-service --force-new-deployment

  test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Run integration tests
        run: |
          # Example integration test command
          curl -f http://my-web-app-url/health || exit 1

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: test
    if: failure()
    steps:
      - name: Rollback ECS Deployment
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
        run: |
          aws ecs update-service --cluster $check --service $web-app-service --force-new-deployment --desired-count 0
